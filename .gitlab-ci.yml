stages:
  - security_scan
  - validate
  - plan
  - deploy
  - web_upload

default:
  image:
    name: hashicorp/terraform:latest
    entrypoint:
      - /usr/bin/env
      - "PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"

variables:
  TF_ROOT: "$CI_PROJECT_DIR/terraforms"
  WEB_DIR: "$CI_PROJECT_DIR/assets"
  WEB_S3: "tylerpettycloudresumechallenge.com"

cache:
  key: "$TF_ROOT"
  paths:
    - "$TF_ROOT/.terraform/"

before_script:
  - export AWS_ACCESS_KEY=${AWS_ACCESS_KEY_ID}
  - export AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
  - cd $TF_ROOT

security_scan:
  stage: security_scan
  image:
    name: ubuntu:latest
  script:
    - apt-get update && apt-get install -y curl
    - curl -s https://raw.githubusercontent.com/aquasecurity/tfsec/master/scripts/install_linux.sh | bash
    - tfsec . -f markdown --out $CI_PROJECT_DIR/tfsec_findings.md
  allow_failure: true
  artifacts:
    when: always
    expire_in: 1 day
    paths:
      - tfsec_findings.md

validate:
  stage: validate
  script:
    - terraform init
    - terraform fmt
    - terraform validate

plan:
  stage: plan
  script:
    - terraform init
    - terraform plan --out plan

deploy:
  stage: deploy
  script:
    - terraform init
    - terraform apply plan
  when: manual
  allow_failure: false
  rules:
    - if: $CI_COMMIT_BRANCH == "main"

web_upload:
  stage: web_upload
  image: registry.gitlab.com/gitlab-org/cloud-deploy/aws-base:latest
  script:
   - cd $WEB_DIR
   - aws s3 ls s3://${WEB_S3}/
   - aws s3 cp ./index.html s3://${WEB_S3}/
   - aws s3 cp --recursive . s3://${WEB_S3}/
  allow_failure: false